"use strict";(self.webpackChunkiota_wiki=self.webpackChunkiota_wiki||[]).push([[278],{9086:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return s},metadata:function(){return u},toc:function(){return p},default:function(){return h}});var r=n(3117),l=n(102),a=(n(7294),n(3905)),i=["components"],o={title:"Role",description:"The role listener executes when roles are updated."},s="Role",u={unversionedId:"listener/role",id:"listener/role",title:"Role",description:"The role listener executes when roles are updated.",source:"@site/internal/automations/listener/role.md",sourceDirName:"listener",slug:"/listener/role",permalink:"/comfyai_docs_build/automations/listener/role",editUrl:"test/internal/automations/listener/role.md",tags:[],version:"current",lastUpdatedAt:1642817248,formattedLastUpdatedAt:"1/21/2022",frontMatter:{title:"Role",description:"The role listener executes when roles are updated."},sidebar:"build",previous:{title:"Reaction",permalink:"/comfyai_docs_build/automations/listener/reaction"},next:{title:"System",permalink:"/comfyai_docs_build/automations/listener/system"}},p=[{value:"Listener expression",id:"listener-expression",children:[],level:4},{value:"Possible arguments",id:"possible-arguments",children:[{value:"Has",id:"has",children:[{value:"Example",id:"example",children:[],level:4}],level:3},{value:"Lacks",id:"lacks",children:[{value:"Example",id:"example-1",children:[],level:4}],level:3}],level:2},{value:"Important distinctions",id:"important-distinctions",children:[],level:2},{value:"Additional examples",id:"additional-examples",children:[],level:2}],d={toc:p};function h(e){var t=e.components,n=(0,l.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"role"},"Role"),(0,a.kt)("h4",{id:"listener-expression"},"Listener expression"),(0,a.kt)("p",null,"The role listener executes when roles are updated."),(0,a.kt)("h2",{id:"possible-arguments"},"Possible arguments"),(0,a.kt)("h3",{id:"has"},"Has"),(0,a.kt)("p",null,"Defines which role set the user must have to trigger the listener."),(0,a.kt)("p",null,"This argument takes a role mention value."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Value"),(0,a.kt)("th",{parentName:"tr",align:null},"Max Values"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Role Mention"),(0,a.kt)("td",{parentName:"tr",align:null},"15"),(0,a.kt)("td",{parentName:"tr",align:null},"Example: @testrole (interpreted as <@&929204504572862537>)")))),(0,a.kt)("p",null,"When entering the command into Discord you do not need to type the snowflake manually. Simply type @ and a list of roles will appear, continue typing a character or two and then pick the role you want from the list. Discord will transmit the snowflake behind the scenes in a way Comfy can interpret."),(0,a.kt)("h4",{id:"example"},"Example"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},'when role has= <@&869466780156964915>, <@&869683374619508736> -> message content= "{listener.username} has triggered the listener!" channel= <#918390434848464907>')),(0,a.kt)("p",null,"This will trigger when a user has the specified set of roles. It will send a message with the username of the user that triggered the listener to the specified channel."),(0,a.kt)("h3",{id:"lacks"},"Lacks"),(0,a.kt)("p",null,"Defines which role set the user must NOT have to trigger the listener."),(0,a.kt)("p",null,"This argument takes a role mention value."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Value"),(0,a.kt)("th",{parentName:"tr",align:null},"Max Values"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Role Mention"),(0,a.kt)("td",{parentName:"tr",align:null},"15"),(0,a.kt)("td",{parentName:"tr",align:null},"Example: @testrole (interpreted as <@&929204504572862537>)")))),(0,a.kt)("h4",{id:"example-1"},"Example"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},'when role lacks= <@&869466780156964915>, <@&869683374619508736> -> message content= "{listener.username} has triggered the listener!" channel= <#918390434848464907>')),(0,a.kt)("p",null,"This will trigger when a user lacks the specified set of roles. It will send a message with the username of the user that triggered the listener to the specified channel."),(0,a.kt)("h2",{id:"important-distinctions"},"Important distinctions"),(0,a.kt)("p",null,"The terminology we chose here (has, lacks) is somewhat misleading. These will not be checked every time the user's roles change, but rather only when the relevant roles are lost or gained. Better words could be GAINS and LOSES. We didn't choose those because it's a bit weird to say a user gains three roles when they could have been granted singularly at very different times."),(0,a.kt)("p",null,"Example: user has 2 roles on them: ",(0,a.kt)("inlineCode",{parentName:"p"},"role1"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"role3"),". The user has a listener that triggers when they have ",(0,a.kt)("inlineCode",{parentName:"p"},"role1")," and lack ",(0,a.kt)("inlineCode",{parentName:"p"},"role2"),". The user then loses role3. Logically this satisfies the listener's requirement of having ",(0,a.kt)("inlineCode",{parentName:"p"},"role1")," and not having ",(0,a.kt)("inlineCode",{parentName:"p"},"role2"),". However, the listener will not fire, because it only fires when the relevant roles are edited such as if the user had ",(0,a.kt)("inlineCode",{parentName:"p"},"role1")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"role2")," and lost ",(0,a.kt)("inlineCode",{parentName:"p"},"role2"),"."),(0,a.kt)("p",null,"This might seem odd, but if we did it the logical way then your listeners would be constantly firing when unrelated roles are changing but the listener is satisfied."),(0,a.kt)("h2",{id:"additional-examples"},"Additional examples"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},'when role has= <@&869466780156964915> lacks= <@&869683374619508736>-> message content= "{listener.username} has triggered the listener!" channel= <#918390434848464907>')),(0,a.kt)("p",null,"This will trigger when a user has the first role but lacks the second role listed."))}h.isMDXComponent=!0},3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return c}});var r=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,l=function(e,t){if(null==e)return{};var n,r,l={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,l=e.mdxType,a=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),h=u(n),c=l,m=h["".concat(s,".").concat(c)]||h[c]||d[c]||a;return n?r.createElement(m,i(i({ref:t},p),{},{components:n})):r.createElement(m,i({ref:t},p))}));function c(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var a=n.length,i=new Array(a);i[0]=h;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:l,i[1]=o;for(var u=2;u<a;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"}}]);